services:
  nginx:
    image: nginx:stable
    container_name: rentdrivewebapp-nginx-1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  frontend:
    build: ./RentDrive.Frontend
    container_name: rentdrivewebapp-frontend-1
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  backend:
    build:
      context: .
      dockerfile: RentDrive.Backend/Dockerfile
    container_name: rentdrivewebapp-backend-1
    networks:
      - app-network
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: rentdrive
      DB_USER: rentdrive
      DB_PASS: rentdrive2025
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      db:
        condition: service_healthy

  certbot:
    image: certbot/certbot
    container_name: rentdrivewebapp-certbot-1
    volumes:
      - ./letsencrypt:/etc/letsencrypt
    networks:
      - app-network

  db:
    image: postgres:17
    container_name: rentdrivewebapp-db-1
    environment:
      POSTGRES_DB: rentdrive
      POSTGRES_USER: rentdrive
      POSTGRES_PASSWORD: rentdrive2025
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge
