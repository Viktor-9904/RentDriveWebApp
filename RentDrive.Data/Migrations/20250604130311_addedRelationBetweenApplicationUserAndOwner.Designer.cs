// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentDrive.Data;

#nullable disable

namespace RentDrive.Data.Migrations
{
    [DbContext(typeof(RentDriveDbContext))]
    [Migration("20250604130311_addedRelationBetweenApplicationUserAndOwner")]
    partial class addedRelationBetweenApplicationUserAndOwner
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RentDrive.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("User profile creation time (UTC).");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompanyEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is the user employee of the company.");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RentDrive.Data.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Vehicle's color.");

                    b.Property<double>("CurbWeightInKg")
                        .HasColumnType("float")
                        .HasComment("Weight of the vehicle when empty in kilograms.");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfProduction")
                        .HasColumnType("datetime2")
                        .HasComment("Vehicle's manufactured date.");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Optional description of the vehicle.");

                    b.Property<double>("EngineDisplacement")
                        .HasColumnType("float")
                        .HasComment("Vehicle's engine capacity in liters.");

                    b.Property<int>("FuelType")
                        .HasColumnType("int")
                        .HasComment("Vehicle's fuel type.");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Manufacturer of the vehicle.");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Model of the vehicle.");

                    b.Property<int>("OdoKilometers")
                        .HasColumnType("int")
                        .HasComment("Vehicle's total kilometers traveled.");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The owner's Id of the vehicle. Null if the vehicle is company-owned.");

                    b.Property<double>("PowerInKiloWatts")
                        .HasColumnType("float")
                        .HasComment("Power output of the vehicle's engine in kilowatts.");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price per hour for renting the vehicle.");

                    b.Property<int>("VehicleTypeCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VehicleTypeCategoryId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a8e2d12-04a3-4c55-8b2b-f9a0f1fd35de"),
                            Color = "White",
                            CurbWeightInKg = 1470.0,
                            DateAdded = new DateTime(2022, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfProduction = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Comfortable midsize sedan, ideal for long drives.",
                            EngineDisplacement = 2.5,
                            FuelType = 1,
                            Make = "Toyota",
                            Model = "Camry",
                            OdoKilometers = 34500,
                            PowerInKiloWatts = 150.0,
                            PricePerHour = 12.50m,
                            VehicleTypeCategoryId = 2,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = new Guid("fe15cde2-1a90-46d4-89f1-10fda7f11743"),
                            Color = "Dark Green",
                            CurbWeightInKg = 2045.0,
                            DateAdded = new DateTime(2023, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfProduction = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spacious and off-road capable SUV.",
                            EngineDisplacement = 3.6000000000000001,
                            FuelType = 1,
                            Make = "Jeep",
                            Model = "Grand Cherokee",
                            OdoKilometers = 27500,
                            PowerInKiloWatts = 213.0,
                            PricePerHour = 22.00m,
                            VehicleTypeCategoryId = 1,
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = new Guid("ff71fcbc-6829-47fd-81c7-d16d7c2c34b4"),
                            Color = "Silver",
                            CurbWeightInKg = 1300.0,
                            DateAdded = new DateTime(2024, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfProduction = new DateTime(2021, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Compact hatchback with great fuel economy.",
                            EngineDisplacement = 1.3999999999999999,
                            FuelType = 1,
                            Make = "Volkswagen",
                            Model = "Golf",
                            OdoKilometers = 19800,
                            PowerInKiloWatts = 103.0,
                            PricePerHour = 10.00m,
                            VehicleTypeCategoryId = 3,
                            VehicleTypeId = 1
                        });
                });

            modelBuilder.Entity("RentDrive.Data.Models.VehicleImages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("images/default-image.jpg")
                        .HasComment("Vehicle Image URL.");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a35616f3-67b2-4d66-95cd-78fae80883fa"),
                            ImageURL = "/images/vehicles/Vehicle-1.png",
                            VehicleId = new Guid("6a8e2d12-04a3-4c55-8b2b-f9a0f1fd35de")
                        },
                        new
                        {
                            Id = new Guid("47725763-dc3a-485b-9f12-26df29497dd1"),
                            ImageURL = "/images/vehicles/Vehicle-3.jpg",
                            VehicleId = new Guid("fe15cde2-1a90-46d4-89f1-10fda7f11743")
                        },
                        new
                        {
                            Id = new Guid("1d989d71-afdb-4741-8851-dedc44ffe964"),
                            ImageURL = "/images/vehicles/Vehicle-2.jpg",
                            VehicleId = new Guid("ff71fcbc-6829-47fd-81c7-d16d7c2c34b4")
                        });
                });

            modelBuilder.Entity("RentDrive.Data.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the vehicle type.");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Car"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Truck"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Motorcycle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bicycle"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Electric Scooter"
                        },
                        new
                        {
                            Id = 6,
                            Name = "All Terrain Vehicle (ATV)"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Camper Trailer"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Recreational Vehicle"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Limousine"
                        });
                });

            modelBuilder.Entity("RentDrive.Data.Models.VehicleTypeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the vehicle class.");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)")
                        .HasComment("Description of the vehicle class.");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleTypeClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "SUV",
                            Description = "Spacious and powerful car ideal for families and off-road.",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Sedan",
                            Description = "Comfortable passenger car suitable for everyday use.",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Hatchback",
                            Description = "Compact car with a rear door that swings upward.",
                            VehicleTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Pickup",
                            Description = "Truck with an open cargo area in the back.",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Box Truck",
                            Description = "Truck with a large, enclosed cargo area.",
                            VehicleTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Naked",
                            Description = "Very good bike for everyday riding.",
                            VehicleTypeId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RentDrive.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RentDrive.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentDrive.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RentDrive.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RentDrive.Data.Models.Vehicle", b =>
                {
                    b.HasOne("RentDrive.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RentDrive.Data.Models.VehicleTypeCategory", "VehicleTypeCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentDrive.Data.Models.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("VehicleType");

                    b.Navigation("VehicleTypeCategory");
                });

            modelBuilder.Entity("RentDrive.Data.Models.VehicleImages", b =>
                {
                    b.HasOne("RentDrive.Data.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleImages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RentDrive.Data.Models.VehicleTypeCategory", b =>
                {
                    b.HasOne("RentDrive.Data.Models.VehicleType", "VehicleType")
                        .WithMany("VehicleTypeCategory")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("RentDrive.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RentDrive.Data.Models.Vehicle", b =>
                {
                    b.Navigation("VehicleImages");
                });

            modelBuilder.Entity("RentDrive.Data.Models.VehicleType", b =>
                {
                    b.Navigation("VehicleTypeCategory");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RentDrive.Data.Models.VehicleTypeCategory", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
